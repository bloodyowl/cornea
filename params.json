{"name":"Cornea","tagline":"view handler, avoids mess","body":"# cornea\r\n\r\n[![browser support](https://ci.testling.com/bloodyowl/cornea.png)](https://ci.testling.com/bloodyowl/cornea)\r\n\r\ncornea is a simple view manager inspired by [backbonejs](http://backbonejs.org) to help you organise your code.\r\n\r\n## key features\r\n\r\n- DOM event organiser\r\n- testable methods\r\n- compatible with any kind of templates (string and nodes)\r\n- elements/attributes/properties binding (with micro-templates)\r\n- dynamic stylesheet modification for high performance\r\n- class-event for modules communication\r\n- no zombie-view\r\n- creation and destruction hooks\r\n- 4k minified and gzip\r\n\r\n## install\r\n\r\n```shell\r\n$ npm install cornea\r\n```\r\n\r\n## require\r\n\r\n```javascript\r\nvar cornea = require(\"cornea\")\r\n```\r\n\r\n## use\r\n\r\n### `cornea.extend(options)`\r\n\r\nCreates a subclass. Useful for sharing common handlers.\r\n\r\n### `cornea#create(options)`\r\n\r\nCreates a `cornea` view. Binds events.\r\n\r\n### `cornea#destroy`\r\n\r\nUnbinds the events.\r\n\r\n### `cornea#render`\r\n\r\nRenders the given template into `view.element`.\r\n\r\n### `cornea.binding(key)`\r\n\r\nReturns a `binding` object for the given `key`.\r\n\r\n### `cornea.data`\r\n\r\nObject for template data, bindings relate to it.\r\n\r\n### `cornea.update(key, value)`\r\n\r\nUpdates bindings for `key` with `value`.\r\n\r\n### `cornea.setStyle(selector, properties)`\r\n\r\nSets the style for the given `selector` with the properties.\r\n\r\n`properties` should be written like `{\"font-size\":\"3em\"}`.\r\n\r\nPassing `null` as a value resets the property to its defaults.\r\n\r\n**NOTE** : careful, styles are not scoped, selectors affect all the elements\r\nin the DOM.\r\n\r\n### `binding`\r\n\r\n#### `binding.toNode(bindingOptions)`\r\n\r\nReturns a bound node.\r\n\r\n#### `binding.toString(bindingOptions)`\r\n\r\nReturns the string representation of a bound node.\r\n\r\n##### `bindingOptions`\r\n\r\n* `bindingOptions.escape`\r\n* `bindingOptions.className`\r\n* `bindingOptions.nodeName`\r\n* `bindingOptions.attributes` (object, as key:value)\r\n* `bindingOptions.template` (string, where `#{*}` is the bound value)\r\n\r\n#### `binding.bindAttribute(node, attributeName, options)`\r\n\r\nBinds `attributeName`.\r\nOptions are :\r\n\r\n* `bindingOptions.escape`\r\n* `bindingOptions.template`\r\n\r\n### `options`\r\n\r\n#### `options.element`\r\n\r\n`String` or `Node`, optional.\r\nView root.\r\nIf not defined, an empty `<div>` will be created.\r\n\r\n#### `options.template`\r\n\r\n`Function`, optional (default : `-> \"\"`).\r\n\r\nTemplate called on `.render`. Should return a `string` or a `node`.\r\n\r\n#### `options.initialize`\r\n\r\n`Function`, optional.\r\nCode to execute when the `view.create` method is called.\r\nIts `thisValue` is the current `view` and its arguments are the one passed to `view.create`.\r\n\r\n**note** The first `.create` argument is though reserved to the `view` extension.  \r\n\r\n#### `options.release`\r\n\r\n`Function`, optional.\r\nCode to execute when the `view.destroy` method is called.\r\n\r\n\r\n#### `options.events`\r\n\r\n`Array`, optional.\r\nList of events to bind.\r\n\r\n#### `options.events[index]`\r\n\r\n* `type` String, event type (e.g. `click`)\r\n* `selector` String (optional), delegation selector\r\n* `listener` String, name of the view's method to bind\r\n* `capture` Boolean (optional, default: `false`), `useCapture` flag.\r\n\r\n**note** : if `view.listener` changes, it will affect the event callback\r\n(a hook is set and fetches the right method)\r\n\r\n## class-events\r\n\r\n**NOTE** : These are `cornea` events, not DOM ones.\r\nThis is mainly app communication.\r\n\r\n### `cornea.listen(type, listener)`\r\n\r\nlistens the the `type` event and attaches `listener` to it.\r\n\r\n### `cornea.stopListening([type[, listener]])`\r\n\r\nstops listening :\r\n\r\n- if no argument is set : all events\r\n- if `type` is set : all `type` events\r\n- if `type` and `listener` are set : the `listener` for this `type`\r\n\r\n### `cornea.fire(type[, data…])`\r\n\r\nfires asynchronously the given `type` event, passing the `data…` arguments to the listeners.\r\n\r\n### `cornea.fireSync(type[, data])`\r\n\r\nfires synchronously the given `type` event, passing the `data…` arguments to the listeners.\r\n\r\n\r\n## example\r\n\r\n```javascript\r\nvar cornea = require(\"cornea\")\r\n  , app = require(\"./app\")\r\n\r\nmodule.exports = cornea.extend({\r\n  element : \".Lightbox\",\r\n  initialize : function(){\r\n    var lightbox = this\r\n    app.listen(\"lightbox:show\", function(data){\r\n      lightbox.update(\"value\", data)\r\n      lightbox.show()\r\n    })\r\n  },\r\n  events : [\r\n    {\r\n      type : \"click\",\r\n      selector : \".js-close\",\r\n      listener : \"hide\"\r\n    }\r\n  ],\r\n  hide : function(){\r\n    this.element.classList.remove(\"Lightbox--visible\")\r\n  },\r\n  show : function(left, top){\r\n    this.element.classList.add(\"Lightbox--visible\")\r\n    this.setStyle(\".Lightbox\", {\r\n      \"top\" : top + \"px\",\r\n      \"left\" : left + \"px\"\r\n    })\r\n    this.fire(\"lightbox:show\")\r\n  },\r\n  template : function(data){\r\n    return [\r\n      \"<div class='Lightbox-overlay'></div>\",\r\n      \"<div class='Lightbox-lightbox'>\",\r\n        \"<button class='Lightbox-close js-Close'>&times;</button>\",\r\n          this.binding(\"value\").toString({\r\n            className : \"Lightbox-content\",\r\n            escape : false,\r\n            nodeName : \"div\"\r\n          }),\r\n      \"</div>\"\r\n    ].join(\"\")\r\n  },\r\n  data : {\r\n    value : \"\"\r\n  }\r\n})\r\n```\r\n\r\nand init your view :\r\n\r\n```javascript\r\nvar view = require(\"./myView\")\r\n  , otherView = require(\"./otherView\").create()\r\n\r\nvar myView = view.create()\r\n\r\nmyView.update(\"value\", \"oh hai\")\r\nmyView.listen(\"lightbox:show\", function(){\r\n  otherView.hide()\r\n})\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}